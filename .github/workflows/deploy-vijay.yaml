name: Deploy to vijay environment on push to main

on:
  push:
    branches: [ main ]
    paths:
      - 'force-app/**'

jobs:
  Deploy-to-vijay-environment:
    runs-on: ubuntu-latest
    environment: vijay
    steps:
      - name: 'Checkout source code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper delta detection
          
      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: npm install @salesforce/cli --global

      # Install sfdx-git-delta plugin
      - name: 'Installing sfdx git delta'
        run: |
          echo Y | sf plugins install sfdx-git-delta
          sf plugins --core

      # Debug and create delta packages
      - name: 'Debug Git and Create Delta Packages'
        run: |
          echo "=== Git Debug Information ==="
          git log --oneline -5
          echo ""
          echo "=== Current commit vs previous commit changes ==="
          git diff --name-only HEAD~1 HEAD
          echo ""
          echo "=== Force-app specific changes ==="
          git diff --name-only HEAD~1 HEAD | grep "force-app/" || echo "No force-app changes found"
          echo ""
          
          echo "=== Creating delta package ==="
          mkdir -p changed-sources
          
          # Check if there are any force-app changes first
          FORCE_APP_CHANGES=$(git diff --name-only HEAD~1 HEAD | grep "force-app/" | wc -l)
          echo "Number of force-app changes: $FORCE_APP_CHANGES"
          
          if [ "$FORCE_APP_CHANGES" -gt 0 ]; then
            echo "Generating delta package..."
            
            # Generate delta between current commit and previous commit
            sf sgd source delta \
              --to "HEAD" \
              --from "HEAD~1" \
              --output changed-sources/ \
              --generate-delta \
              --source force-app/ || echo "Delta generation failed, continuing..."
            
            echo "=== Delta generation completed ==="
            echo "Contents of changed-sources directory:"
            find changed-sources/ -type f 2>/dev/null || echo "No files in changed-sources"
            echo ""
            
            # Check if the delta actually contains deployable files
            if [ -d "changed-sources/force-app" ]; then
              DEPLOYABLE_FILES=$(find changed-sources/force-app -type f \( -name "*.xml" -o -name "*.cls" -o -name "*.trigger" -o -name "*.page" -o -name "*.component" -o -name "*.js" -o -name "*.css" \) 2>/dev/null | wc -l)
              echo "Deployable files found: $DEPLOYABLE_FILES"
              
              if [ "$DEPLOYABLE_FILES" -gt 0 ]; then
                echo "DEPLOY_CHANGES=true" >> $GITHUB_ENV
                echo "=== Files to be deployed ==="
                find changed-sources/force-app -type f | head -20
              else
                echo "No deployable Salesforce files found in delta"
                echo "DEPLOY_CHANGES=false" >> $GITHUB_ENV
              fi
            else
              echo "No changed-sources/force-app directory created"
              echo "DEPLOY_CHANGES=false" >> $GITHUB_ENV
            fi
          else
            echo "No force-app changes detected between commits"
            echo "DEPLOY_CHANGES=false" >> $GITHUB_ENV
          fi

      # Deploy only if there are changes
      - name: 'Deploy to Salesforce org'
        if: env.DEPLOY_CHANGES == 'true'
        run: |
          # Create server key file
          echo "${{ secrets.JWT_SERVER_KEY }}" > server.key
          
          # Authenticate with Salesforce
          sf org login jwt \
            --username ${{ secrets.DEPLOYMENT_USER_NAME }} \
            --jwt-key-file server.key \
            --client-id ${{ secrets.CONSUMER_KEY }} \
            --instance-url ${{ vars.INSTANCE_URL }} \
            --set-default
          
          # Deploy the changes
          sf project deploy start \
            --source-dir changed-sources/force-app \
            --test-level RunLocalTests \
            --wait 20
          
          # Clean up
          rm server.key

      # Alternative deployment method if delta fails
      - name: 'Deploy changed files directly (fallback)'
        if: env.DEPLOY_CHANGES == 'false'
        run: |
          echo "=== Fallback: Deploy changed files directly ==="
          
          # Get list of changed force-app files
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep "force-app/" || echo "")
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "Changed files detected, creating manual delta package..."
            echo "$CHANGED_FILES"
            
            # Create server key file
            echo "${{ secrets.JWT_SERVER_KEY }}" > server.key
            
            # Authenticate with Salesforce
            sf org login jwt \
              --username ${{ secrets.DEPLOYMENT_USER_NAME }} \
              --jwt-key-file server.key \
              --client-id ${{ secrets.CONSUMER_KEY }} \
              --instance-url ${{ vars.INSTANCE_URL }} \
              --set-default
            
            # Create a comma-separated list of files for deployment
            FILE_LIST=$(echo "$CHANGED_FILES" | tr '\n' ',' | sed 's/,$//')
            echo "Deploying files: $FILE_LIST"
            
            # Deploy specific files
            sf project deploy start \
              --source-dir force-app \
              --metadata $(echo "$CHANGED_FILES" | while read file; do
                if [[ "$file" == *".cls" ]]; then
                  basename "$file" .cls | sed 's/^/ApexClass:/'
                elif [[ "$file" == *".trigger" ]]; then
                  basename "$file" .trigger | sed 's/^/ApexTrigger:/'
                elif [[ "$file" == *"fields"* && "$file" == *".xml" ]]; then
                  echo "$file" | sed 's/.*objects\/\([^/]*\)\/fields\/\([^/]*\)\.field-meta\.xml/CustomField:\1.\2/'
                fi
              done | tr '\n' ',' | sed 's/,$//' || echo "CustomObject:Account") \
              --test-level RunLocalTests \
              --wait 20 || echo "Direct file deployment failed"
            
            # Clean up
            rm server.key
          else
            echo "No force-app changes found for fallback deployment either"
          fi